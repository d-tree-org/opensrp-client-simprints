description = 'OpenSRP simprint client library'

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.2'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'


jacoco {
    toolVersion = "0.8.0"
}

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

    lintOptions {
        abortOnError false
    }

    // avoid errors with message 'Duplicate files copied in APK ...'
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties")))

def getVersionName = { ->
    return "1.1.2-SNAPSHOT" // Replace with version Name
}

def getArtificatId = { ->
    return "opensrp-simprints" // Replace with library name ID
}

publishing {
    publications {
        bar(MavenPublication) {
            groupId 'org.smartregister' // Replace with group ID
            artifactId getArtificatId()
            version getVersionName()
            artifact("$buildDir/outputs/aar/${getArtificatId()}-debug.aar")

//            //This is to carter for transitive dependencies within this library
//            pom.withXml {
//                final dependenciesNode = asNode().appendNode('dependencies')
//                ext.addDependency = { Dependency dep, String scope ->
//                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
//                        return
//                    final dependencyNode = dependenciesNode.appendNode('dependency')
//                    dependencyNode.appendNode('groupId', dep.group)
//                    dependencyNode.appendNode('artifactId', dep.name)
//                    dependencyNode.appendNode('version', dep.version)
//                    dependencyNode.appendNode('scope', scope)
//                    if (!dep.transitive) {
//                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
//                        exclusionNode.appendNode('groupId', '*')
//                        exclusionNode.appendNode('artifactId', '*')
//                    } else if (!dep.properties.excludeRules.empty) {
//                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
//                        dep.properties.excludeRules.each { ExcludeRule rule ->
//                            exclusionNode.appendNode('groupId', rule.group ?: '*')
//                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
//                        }
//                    }
//                }
//                configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
//                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
//                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
//            }

        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            /** Configure path of your package repository on Github
             ** Replace GITHUB_USERID with your/organisation Github userID
             ** and REPOSITORY with the repository name on GitHub
             */
            url = uri("https://maven.pkg.github.com/d-tree-org/opensrp-client-simprints")
            credentials {
                /** Create github.properties in root project folder file with
                 ** gpr.usr=GITHUB_USER_ID & gpr.key=PERSONAL_ACCESS_TOKEN
                 ** Set env variable GPR_USER & GPR_API_KEY if not adding a properties file**/

                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }
}

allprojects {
    repositories {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        mavenLocal()
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.simprints:libsimprints:2019.3.1'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation('org.smartregister:opensrp-client-core:1.8.10-SNAPSHOT@aar') {
        transitive = true
    }

    implementation('org.smartregister:opensrp-client-family:1.2.26-DEMO-2-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'org.smartregister', module: 'opensrp-client-materialedittext'
    }

}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
}

apply from: '../maven.gradle'
